#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CUSTOMERS 100
#define MAX_TRANSACTIONS 100
#define MAX_STACK_SIZE 100

typedef enum {
    DEPOSIT,
    WITHDRAW
} TransactionType;

typedef struct {
    TransactionType type;
    double amount;
} Transaction;

typedef struct {
    int accountId;
    double balance;
    Transaction transactionStack[MAX_STACK_SIZE];
    int stackSize;
} Account;

typedef struct {
    int customerId;
    char name[50];
    char email[50];
    Account account;
} Customer;

Customer customers[MAX_CUSTOMERS];
int customerCount = 0;

// Push a transaction onto the stack
void pushTransaction(Account *account, TransactionType type, double amount) {
    if (account->stackSize < MAX_STACK_SIZE) {
        account->transactionStack[account->stackSize].type = type;
        account->transactionStack[account->stackSize].amount = amount;
        account->stackSize++;
    } else {
        printf("Transaction stack is full.\n");
    }
}

// Pop a transaction from the stack
int popTransaction(Account *account, Transaction *transaction) {
    if (account->stackSize > 0) {
        account->stackSize--;
        *transaction = account->transactionStack[account->stackSize];
        return 1;  // Transaction popped successfully
    }
    return 0;  // No transaction to pop
}

// Function to add a new customer
void addCustomer(int customerId, const char* name, const char* email) {
    if (customerCount < MAX_CUSTOMERS) {
        customers[customerCount].customerId = customerId;
        strncpy(customers[customerCount].name, name, sizeof(customers[customerCount].name) - 1);
        customers[customerCount].name[sizeof(customers[customerCount].name) - 1] = '\0'; // Ensure null termination
        strncpy(customers[customerCount].email, email, sizeof(customers[customerCount].email) - 1);
        customers[customerCount].email[sizeof(customers[customerCount].email) - 1] = '\0'; // Ensure null termination
        customers[customerCount].account.accountId = customerId;
        customers[customerCount].account.balance = 0.0;
        customers[customerCount].account.stackSize = 0;  // Initialize stack size
        customerCount++;
        printf("Customer added successfully.\n");
    } else {
        printf("Customer limit reached.\n");
    }
}

// Function to deposit money
void deposit(int customerId, double amount) {
    for (int i = 0; i < customerCount; i++) {
        if (customers[i].customerId == customerId) {
            customers[i].account.balance += amount;
            pushTransaction(&customers[i].account, DEPOSIT, amount);
            printf("Deposit successful.\n");
            return;
        }
    }
    printf("Customer not found.\n");
}

// Function to withdraw money
void withdraw(int customerId, double amount) {
    if (amount <= 0) {
        printf("Amount must be greater than zero.\n");
        return;
    }

    for (int i = 0; i < customerCount; i++) {
        if (customers[i].customerId == customerId) {
            if (customers[i].account.balance >= amount) {
                customers[i].account.balance -= amount;
                pushTransaction(&customers[i].account, WITHDRAW, amount);
                printf("Withdrawal successful.\n");
            } else {
                printf("Insufficient balance.\n");
            }
            return;
        }
    }
    printf("Customer not found.\n");
}

// Function to undo the last transaction
void undoLastTransaction(int customerId) {
    for (int i = 0; i < customerCount; i++) {
        if (customers[i].customerId == customerId) {
            Transaction transaction;
            if (popTransaction(&customers[i].account, &transaction)) {
                if (transaction.type == DEPOSIT) {
                    customers[i].account.balance -= transaction.amount;
                    printf("Undo successful: Deposited %.2f has been reversed.\n", transaction.amount);
                } else if (transaction.type == WITHDRAW) {
                    customers[i].account.balance += transaction.amount;
                    printf("Undo successful: Withdrawn %.2f has been reversed.\n", transaction.amount);
                }
            } else {
                printf("No transactions to undo.\n");
            }
            return;
        }
    }
    printf("Customer not found.\n");
}

// Function to display account details
void displayAccount(int customerId) {
    for (int i = 0; i < customerCount; i++) {
        if (customers[i].customerId == customerId) {
            printf("Customer ID: %d\n", customers[i].customerId);
            printf("Name: %s\n", customers[i].name);
            printf("Balance: %.2f\n", customers[i].account.balance);
            printf("Transactions (most recent first):\n");
            for (int j = customers[i].account.stackSize - 1; j >= 0; j--) {
                printf("  - %s %.2f\n", 
                    customers[i].account.transactionStack[j].type == DEPOSIT ? "Deposited" : "Withdrew", 
                    customers[i].account.transactionStack[j].amount);
            }
            return;
        }
    }
    printf("Customer not found.\n");
}

int main() {
    int choice, customerId;
    double amount;
    char name[50], email[50];

    while (1) {
        printf("\nOnline Banking System\n");
        printf("1. Add Customer\n");
        printf("2. Deposit\n");
        printf("3. Withdraw\n");
        printf("4. Display Account\n");
        printf("5. Undo Last Transaction\n");
        printf("6. Exit\n");
        printf("Choose an option: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Customer ID: ");
                scanf("%d", &customerId);
                getchar(); // Consume the newline character left by scanf
                printf("Enter Name: ");
                fgets(name, sizeof(name), stdin);
                name[strcspn(name, "\n")] = '\0'; // Remove trailing newline
                printf("Enter Email: ");
                fgets(email, sizeof(email), stdin);
                email[strcspn(email, "\n")] = '\0'; // Remove trailing newline
                addCustomer(customerId, name, email);
                break;

            case 2:
                printf("Enter Customer ID: ");
                scanf("%d", &customerId);
                printf("Enter Amount to Deposit: ");
                scanf("%lf", &amount);
                deposit(customerId, amount);
                break;

            case 3:
                printf("Enter Customer ID: ");
                scanf("%d", &customerId);
                printf("Enter Amount to Withdraw: ");
                scanf("%lf", &amount);
                withdraw(customerId, amount);
                break;

            case 4:
                printf("Enter Customer ID: ");
                scanf("%d", &customerId);
                displayAccount(customerId);
                break;

            case 5:
                printf("Enter Customer ID: ");
                scanf("%d", &customerId);
                undoLastTransaction(customerId);
                break;

            case 6:
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid option. Please try again.\n");
        }
    }

    return 0;
}
